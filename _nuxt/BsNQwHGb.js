import{B as i,K as U,c as S,Q as y,R as m,i as L,S as b,T as p,U as I,O,L as C,V as F,P as _,C as E}from"#entry";const P=()=>{const a=i("fb_user",()=>null),n=i("fb_auth_initialized",()=>!1),o=i("fb_auth_loading",()=>!0),{$auth:u,$db:f}=U(),l=()=>{if(n.value)return;const e=m(u,t=>{a.value=t,n.value=!0,o.value=!1},t=>{n.value=!0,o.value=!1});F()?_(()=>{console.log("ðŸ§¹ Auth listener unmounted"),e()}):window.addEventListener("beforeunload",()=>e())};n.value||l();const c=async(e,t,s)=>{try{const r=await I(u,e,t);if(r){a.value=r.user;const A=!s||s.trim()===""?e.split("@")[0]:s.trim();return await O(C(f,"users",r.user.uid),{email:e,role:"user",name:A,phone:"",address:{delivery:"",invoice:""},createdAt:new Date().toISOString()}),!0}}catch{return!1}return!1},d=async(e,t)=>{try{const s=await p(u,e,t);if(s)return a.value=s.user,!0}catch{return!1}return!1},g=async()=>{try{return await b(u),a.value=null,!0}catch{return!1}},h=S(()=>a.value!==null),v=S(()=>a.value?.uid??null),w=()=>new Promise(e=>{if(n.value||l(),n.value){e(a.value);return}const t=L(n,s=>{s&&(t(),e(a.value))});setTimeout(()=>{n.value||(t(),e(a.value))},5e3)});return{user:y(a),initialized:y(n),isLoading:y(o),isAuthenticated:h,userId:v,registerUser:c,signInUser:d,signOutUser:g,waitForAuth:w}},R=()=>{const{user:a,isLoading:n,isAuthenticated:o,registerUser:u,signInUser:f,signOutUser:l}=P(),c=i("authUser",()=>null),d=i("authStatus",()=>!1),g=i("loadingStatus",()=>!1);E(()=>{d.value=o.value,g.value=n.value,c.value=a.value});async function h(e,t){const s=await f(e,t);console.log(s?"Successfully signed in.....":"Failed to sign in.....")}async function v(e,t,s){const r=await u(e,t,s);console.log(r?"Successfully registered.....":"Failed to register.....")}async function w(){const e=await l();console.log(e?"Signed out successfully.....":"Failed to sign out.....")}return{authUser:c,authStatus:d,loadingStatus:g,handleLogin:h,handleRegistration:v,handleLogout:w}};export{P as a,R as u};
